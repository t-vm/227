[gd_scene load_steps=5 format=3 uid="uid://dqy14eji24fwi"]

[ext_resource type="Texture2D" uid="uid://jahfmtc5x0ec" path="res://photo/标题/背景611.png" id="1_3llsu"]
[ext_resource type="Script" path="res://全部游戏/未完待续/结束.gd" id="2_uvugl"]

[sub_resource type="Shader" id="Shader_btw7l"]
code = "shader_type canvas_item;
uniform sampler2D screen_texture : hint_screen_texture, repeat_disable, filter_nearest;


vec2 curve(vec2 uv)
{
uv = (uv - 0.5) * 2.0;
uv *= 1.1; 
uv.x *= 1.0 + pow((abs(uv.y) / 8.0), 2.0);
uv.y *= 1.0 + pow((abs(uv.x) / 6.0), 2.0);
uv  = (uv / 2.0) + 0.5;
uv =  uv *0.92 + 0.04;
return uv;
}
//产生曲面效果的画面畸变

void fragment(  )
{
vec2 iResolution = 1.0 / SCREEN_PIXEL_SIZE;
    vec2 q = FRAGCOORD.xy / iResolution.xy;
    vec2 uv = q;
    uv = curve( uv );
	// 纹理坐标变换
    vec3 oricol = texture( screen_texture, vec2(q.x,q.y) ).xyz;
    vec3 col;
	//获取屏幕分辨率
float x =  sin(0.3*TIME+uv.y*21.0)*sin(0.7*TIME+uv.y*29.0)*sin(0.3+0.33*TIME+uv.y*31.0)*0.0017;
	//从屏幕纹理中采样颜色
	
    col.r = texture(screen_texture,vec2(x+uv.x+0.001,uv.y+0.001)).x+0.05;
    col.g = texture(screen_texture,vec2(x+uv.x+0.000,uv.y-0.002)).y+0.05;
    col.b = texture(screen_texture,vec2(x+uv.x-0.002,uv.y+0.000)).z+0.05;
    col.r += 0.08*texture(screen_texture,0.75*vec2(x+0.025, -0.027)+vec2(uv.x+0.001,uv.y+0.001)).x;
    col.g += 0.05*texture(screen_texture,0.75*vec2(x+-0.022, -0.02)+vec2(uv.x+0.000,uv.y-0.002)).y;
    col.b += 0.08*texture(screen_texture,0.75*vec2(x+-0.02, -0.018)+vec2(uv.x-0.002,uv.y+0.000)).z;

    col = clamp(col*0.6+0.4*col*col*1.0,0.0,1.0);

    float vig = (0.0 + 1.0*16.0*uv.x*uv.y*(1.0-uv.x)*(1.0-uv.y));
	//并计算纹理坐标rgb值
	
col *= vec3(pow(vig,0.3));

    col *= vec3(0.95,1.05,0.95);
col *= 2.8;

float scans = clamp( 0.35+0.35*sin(3.5*TIME+uv.y*iResolution.y*1.5), 0.0, 1.0);

float s = pow(scans,1.7);
col = col*vec3( 0.4+0.7*s) ;

    col *= 1.0+0.01*sin(110.0*TIME);
if (uv.x < 0.0 || uv.x > 1.0)
col *= 0.0;
if (uv.y < 0.0 || uv.y > 1.0)
col *= 0.0;

col*=1.0-0.65*vec3(clamp((mod(FRAGCOORD.x, 2.0)-1.0)*2.0,0.0,1.0));

    float comp = smoothstep( 0.1, 0.9, sin(TIME) );
 

    COLOR = vec4(col,1.0);
	//计算纹理坐标
} "

[sub_resource type="ShaderMaterial" id="ShaderMaterial_a8gol"]
shader = SubResource("Shader_btw7l")

[node name="未完待续" type="Node2D"]

[node name="TextureRect" type="TextureRect" parent="."]
offset_right = 1728.0
offset_bottom = 972.0
texture = ExtResource("1_3llsu")
expand_mode = 1
script = ExtResource("2_uvugl")

[node name="HBoxContainer" type="HBoxContainer" parent="TextureRect"]
custom_minimum_size = Vector2(500, 300)
layout_mode = 0
offset_left = 616.0
offset_top = 345.0
offset_right = 1116.0
offset_bottom = 645.0

[node name="Button" type="Button" parent="TextureRect/HBoxContainer"]
custom_minimum_size = Vector2(500, 0)
layout_mode = 2
theme_override_colors/font_color = Color(0.403922, 0.533333, 0.568627, 1)
theme_override_font_sizes/font_size = 100
text = "未完待续"
flat = true

[node name="ColorRect" type="ColorRect" parent="."]
z_index = 1
material = SubResource("ShaderMaterial_a8gol")
offset_right = 1728.0
offset_bottom = 975.0

[connection signal="pressed" from="TextureRect/HBoxContainer/Button" to="TextureRect" method="gameover"]
